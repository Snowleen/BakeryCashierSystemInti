/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author User
 */
import java.awt.Container;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.sql.*;
import java.util.ArrayList;
import javax.swing.*;
import java.awt.Image; // For working with Image objects
import javax.swing.ImageIcon; 
import java.io.FileWriter;
import java.io.IOException;

import java.sql.PreparedStatement; // for PreparedStatement



public class GenerateReceipt extends javax.swing.JFrame {

    private double totalAmount = 0.0;
    private ArrayList<CartItem> cart = new ArrayList<>(); //i cannot declare as final because it needs to restore in array after edit
    private Connection conn;
    
    
   
 
    
    public GenerateReceipt() {
        initComponents();
        connectToDatabase();
        
        String imagePath1 = "/chocolate-cake.png"; 
jButton2.setIcon(resizeImage(imagePath1, 50, 50));

 String imagePath3 = "/croissant.jpg"; 
jButton3.setIcon(resizeImage(imagePath3, 50, 50));

     String imagePath4 = "/download.jpg"; 
jButton4.setIcon(resizeImage(imagePath4, 50, 50));

String imagePath5 = "/strawberry.jpg"; 
jButton5.setIcon(resizeImage(imagePath5, 50, 50));

String imagePath6 = "/cheese.jpg";
jButton6.setIcon(resizeImage(imagePath6, 50, 50));

String imagePath7 = "/garlic.jpg"; 
jButton7.setIcon(resizeImage(imagePath7, 50, 50));

String imagePath8 = "/bagel.jpg"; 
jButton8.setIcon(resizeImage(imagePath8, 50, 50));

String imagePath9 = "/applepie.jpg"; 
jButton9.setIcon(resizeImage(imagePath9, 50, 50));

String imagePath10 = "/cookie.jpg"; 
jButton10.setIcon(resizeImage(imagePath10, 50, 50));

String imagePath11 = "/vanilla.jpg"; 
jButton11.setIcon(resizeImage(imagePath11, 50, 50));

String imagePath12 = "/cinnamon.jpg"; 
jButton12.setIcon(resizeImage(imagePath12, 50, 50));

String imagePath13 = "/banana.jpg"; 
jButton13.setIcon(resizeImage(imagePath13, 50, 50));

String imagePath14 = "/raspberry.jpg"; 
jButton14.setIcon(resizeImage(imagePath14, 50, 50));

String imagePath15 = "/pumpkin.jpg"; 
jButton15.setIcon(resizeImage(imagePath15, 50, 50));

this.setLocationRelativeTo(null);

//----to add  scroll bar-----

// Retrieve the existing content pane 
    Container contentPane = this.getContentPane();

    // Wrap the content pane in a JScrollPane
    JScrollPane scrollPane = new JScrollPane(contentPane);
    scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
    scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);

    // Set the scroll pane as the new content pane
    this.setContentPane(scrollPane);
    this.setLocationRelativeTo(null);
    this.pack();

}

    
public ImageIcon resizeImage(String resourcePath, int width, int height) {
    ImageIcon icon = new ImageIcon(getClass().getResource(resourcePath));
    Image img = icon.getImage();
    Image resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH);
    return new ImageIcon(resizedImg);
}


    // Connect to the database using DBConnection
    private void connectToDatabase() {
        try {
            conn = DBConnection.getConnection(); // Get connection from DBConnection class
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        Cart = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Generate Receipt");
        setPreferredSize(new java.awt.Dimension(800, 500));
        setSize(new java.awt.Dimension(800, 500));

        jButton1.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        jButton1.setText("Generate Receipt");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Comic Sans MS", 1, 24)); // NOI18N
        jLabel2.setText("Generate Receipt");

        jButton2.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        jButton2.setText("Chocolate Cake");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        jButton3.setText("Croissant");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        jButton4.setText("Blueberry Muffin");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        jButton5.setText("Strawberry Cupcake");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        jButton6.setText("Japanese Cheese Cake");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        jButton7.setText("Garlic Bread");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        jButton8.setText("Bagel");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        jButton9.setText("Apple Pie");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        jButton10.setText("Chocolate Chip Cookie");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        jButton11.setText("Vanilla Cupcake");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        Cart.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        Cart.setText("List Cart");
        Cart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CartActionPerformed(evt);
            }
        });

        jButton12.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        jButton12.setText("Cinnammon Roll");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton13.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        jButton13.setText("Banana Bread");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jButton14.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        jButton14.setText("Raspberry Tart");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jButton15.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        jButton15.setText("Pumpkin Muffin");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jButton16.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        jButton16.setText("Back");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        jButton17.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        jButton17.setText("Generate Invoice");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Cart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(132, 132, 132)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(483, 483, 483)
                        .addComponent(jButton16))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(179, 179, 179)
                                .addComponent(jLabel2))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton13, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(162, 162, 162))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(Cart)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jButton17)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jButton10)
                            .addComponent(jButton4)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(137, 137, 137)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton3)
                            .addComponent(jButton9)
                            .addComponent(jButton11))))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jButton12)
                    .addComponent(jButton6))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton13)
                    .addComponent(jButton7)
                    .addComponent(jButton14))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton8)
                    .addComponent(jButton15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 121, Short.MAX_VALUE)
                .addComponent(jButton16)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void addProductToCart(int productId) {
    try {
        String query = "SELECT * FROM product WHERE product_id = ?";
        PreparedStatement stmt = conn.prepareStatement(query);
        stmt.setInt(1, productId);
        ResultSet rs = stmt.executeQuery();

        if (rs.next()) {
            String name = rs.getString("product_name");
            double price = rs.getDouble("unit_price");
            double discount = rs.getDouble("discount");

            boolean productExists = false;
            for (CartItem item : cart) {
                if (item.getName().equals(name)) {
                    item.setQuantity(item.getQuantity() + 1);
                    productExists = true;
                    break;
                }
            }

            if (!productExists) {
                
                CartItem newItem = new CartItem(name, price, 1, discount);
                cart.add(newItem);
            }
        }

    } catch (SQLException e) {
        e.printStackTrace();
    }
}

    
    private void displayCart() {
        StringBuilder cartDetails = new StringBuilder();
        for (int i = 0; i < cart.size(); i++) {
            CartItem item = cart.get(i);
            cartDetails.append(i + 1).append(". ")
                   .append(item.getName()).append(" - ")
                   .append(item.getQuantity()).append(" x RM")
                   .append(String.format("%.2f", item.getPrice())) // Format price to 2 decimal places
                   .append(" (Discount: RM").append(item.getDiscount()).append(")= RM")
                   .append(String.format("%.2f", item.getTotalPrice())).append("\n"); // Format total price to 2 decimal places
        }

        String input = JOptionPane.showInputDialog(
            this, 
            cartDetails.toString() + "\nEnter item number to delete, or press Cancel to exit:",
            "Cart Items",
            JOptionPane.PLAIN_MESSAGE
        );

        if (input != null) {
            try {
                int itemIndex = Integer.parseInt(input) - 1;
                if (itemIndex >= 0 && itemIndex < cart.size()) {
                    cart.remove(itemIndex);
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid input. Please enter a valid item number.");
            }
        }
    }

  private void generateReceipt() {
    // Prompt the user for the invoice ID to generate receipt
    String invoiceIdInput = JOptionPane.showInputDialog(this, "Please enter your invoice ID:");

    if (invoiceIdInput == null || invoiceIdInput.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Invoice ID is required.");
        return;
    }

    int invoiceId;
    try {
        invoiceId = Integer.parseInt(invoiceIdInput);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid invoice ID format. Please enter a valid number.");
        return;
    }

    // SQL Queries
    String invoiceQuery = "SELECT phone_number, total_amount, generated_at FROM invoice WHERE invoice_id = ?";
    String itemsQuery = "SELECT DISTINCT product_name, quantity, unit_price, total_price FROM invoice_item WHERE invoice_id = ?";
    String updateProductQuery = "UPDATE Product SET quantity = quantity - ? WHERE product_name = ?";

    StringBuilder receipt = new StringBuilder();

    try (Connection conn = DBConnection.getConnection()) {
        conn.setAutoCommit(false); // Start transaction

        try (
            PreparedStatement invoiceStmt = conn.prepareStatement(invoiceQuery);
            PreparedStatement itemsStmt = conn.prepareStatement(itemsQuery);
            PreparedStatement updateProductStmt = conn.prepareStatement(updateProductQuery)
        ) {
            // Fetch invoice details
            invoiceStmt.setInt(1, invoiceId);
            ResultSet invoiceRs = invoiceStmt.executeQuery();

            if (!invoiceRs.next()) {
                JOptionPane.showMessageDialog(this, "No records found for the given invoice ID.");
                conn.rollback(); // Rollback transaction
                return;
            }

            // Build receipt header
            receipt.append("Bakery Receipt\n\n")
                   .append("Invoice ID: ").append(invoiceId).append("\n")
                   .append("Phone Number: ").append(invoiceRs.getString("phone_number")).append("\n")
                   .append("Generated At: ").append(invoiceRs.getTimestamp("generated_at")).append("\n");

            // Fetch invoice item details
            itemsStmt.setInt(1, invoiceId);
            ResultSet itemsRs = itemsStmt.executeQuery();

            receipt.append("\nItems:\n"); // Add the "Items" section header only once
            while (itemsRs.next()) {
                String productName = itemsRs.getString("product_name");
                int quantity = itemsRs.getInt("quantity");
                double unitPrice = itemsRs.getDouble("unit_price");
                double totalPrice = itemsRs.getDouble("total_price");
                
                 // Debug log to verify the item being added
    System.out.println("Item added to receipt: " + productName + ", Quantity: " + quantity);

                // Append each item to the receipt
                receipt.append(productName)
                        .append(" - ").append(quantity)
                        .append(" x RM").append(String.format("%.2f", unitPrice))
                        .append(" = RM").append(String.format("%.2f", totalPrice))
                        .append("\n");

                // Update product quantity in the database
                updateProductStmt.setInt(1, quantity);
                updateProductStmt.setString(2, productName);
                int rowsUpdated = updateProductStmt.executeUpdate();
                if (rowsUpdated == 0) {
                    throw new SQLException("Failed to update quantity for product: " + productName);
                }
            }

            receipt.append("\nTotal Amount: RM").append(String.format("%.2f", invoiceRs.getDouble("total_amount")));

            // Show the receipt in a message dialog
            JOptionPane.showMessageDialog(this, receipt.toString(), "Receipt", JOptionPane.PLAIN_MESSAGE);

            // Save receipt to the database
            saveReceiptToDatabase(invoiceId, invoiceRs.getDouble("total_amount"), receipt.toString());

            conn.commit(); // Commit transaction
        } catch (SQLException e) {
            conn.rollback(); // Rollback transaction on error
            JOptionPane.showMessageDialog(this, "Error processing receipt: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Database connection error: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
}



private void updateProductQuantity(Connection conn, int productId, int quantitySold) throws SQLException {
    // Update the product quantity in the database after the sale
    String updateQuery = "UPDATE product SET qty = qty - ? WHERE id = ?";
    try (PreparedStatement updateStmt = conn.prepareStatement(updateQuery)) {
        updateStmt.setInt(1, quantitySold); // Subtract the quantity sold
        updateStmt.setInt(2, productId);    // The product ID to update
        int rowsUpdated = updateStmt.executeUpdate();

        if (rowsUpdated > 0) {
            System.out.println("Product inventory updated for product ID: " + productId);
        } else {
            System.err.println("Error updating inventory for product ID: " + productId);
        }
    }
}



private void saveReceiptToDatabase(int invoiceId, double totalAmount, String receiptText) {
    try {
        // Start a transaction to ensure atomicity
        conn.setAutoCommit(false);
        
        
        String receiptSQL = "INSERT INTO receipts (invoice_id, total_amount, date) VALUES (?, ?, NOW())";
        PreparedStatement receiptStmt = conn.prepareStatement(receiptSQL, Statement.RETURN_GENERATED_KEYS);
        receiptStmt.setInt(1, invoiceId);   // Set the invoice ID parameter
        receiptStmt.setDouble(2, totalAmount);  // Set the total amount parameter
        receiptStmt.executeUpdate();
        
        // Get the generated receipt ID for foreign key reference
        ResultSet generatedKeys = receiptStmt.getGeneratedKeys();
        int receiptId = 0;
        if (generatedKeys.next()) {
            receiptId = generatedKeys.getInt(1);
        }

        // Insert each item in the receipt_items table
        String itemSQL = "INSERT INTO receipt_items (receipt_id, product_name, quantity, price, discount, total_price) VALUES (?, ?, ?, ?, ?, ?)";
        PreparedStatement itemStmt = conn.prepareStatement(itemSQL);
        for (CartItem item : cart) {
            itemStmt.setInt(1, receiptId);
            itemStmt.setString(2, item.getName());
            itemStmt.setInt(3, item.getQuantity());
            itemStmt.setDouble(4, item.getPrice());
            itemStmt.setDouble(5, item.getDiscount());
            itemStmt.setDouble(6, item.getTotalPrice());
            itemStmt.addBatch();
        }
        itemStmt.executeBatch();
        
       

        // Commit the transaction
        conn.commit();
        
        JOptionPane.showMessageDialog(this, "Receipt details have been saved successfully in the database.");
        
        // Export the receipt to a file after saving to database
        exportReceiptToFile(receiptId, receiptText);
        
    } catch (SQLException e) {
        try {
            // Rollback the transaction if any exception occurs
            conn.rollback();
            
            // Update the payment status in the invoice table to 'pending' due to failure of receipt generation(no payment reeived = null, failed receipt generation = pending, success = success)
            String updateInvoiceSQL = "UPDATE invoice SET payment_status = ? WHERE invoice_id = ?";
            PreparedStatement updateInvoiceStmt = conn.prepareStatement(updateInvoiceSQL);
            updateInvoiceStmt.setString(1, "pending");  // Set payment status to "pending"
            updateInvoiceStmt.setInt(2, invoiceId);
            updateInvoiceStmt.executeUpdate();
        } catch (SQLException rollbackEx) {
            rollbackEx.printStackTrace();
        }
        
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error saving receipt to database: " + e.getMessage());
    } finally {
        try {
            
            conn.setAutoCommit(true);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}

private void exportReceiptToFile(int receiptId, String receiptText) {
    // Define the file name with the receipt ID
    String fileName = "Receipt_" + receiptId + ".txt";

    // Use try-with-resources to automatically close the FileWriter after the operation
    try (FileWriter fileWriter = new FileWriter(fileName)) {
        // Write the receipt text to the file
        fileWriter.write(receiptText);

        JOptionPane.showMessageDialog(this, "Receipt has been exported to file: " + fileName);
    } catch (IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error exporting receipt to file: " + e.getMessage());
    }
}




    // prompt user for phone number and generate the invoice
private void generateInvoice() {
    // Prompt the user for phone number
    String phoneNumber = JOptionPane.showInputDialog(this, "Please enter your phone number:");

    if (phoneNumber == null || phoneNumber.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Phone number is required.");
        return;
    }

    

    StringBuilder invoice = new StringBuilder();
    invoice.append("Welcome to Bakery\n");
    invoice.append("Invoice:\n\n");
    invoice.append("Hello dear customer ").append(phoneNumber).append("\n");

    // Capture the current date and time for the invoice
    LocalDateTime dateTime = LocalDateTime.now();
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
    String formattedDateTime = dateTime.format(formatter);

    invoice.append("Generated on: ").append(formattedDateTime).append("\n\n");

    

    // Add cart details 
    for (CartItem item : cart) {
        
        double itemTotal = item.getTotalPrice();
        
        totalAmount += itemTotal;

        invoice.append(item.getName())
                .append(" - ").append(item.getQuantity())
                .append(" x RM").append(String.format("%.2f", item.getPrice()))
                .append(" = RM").append(String.format("%.2f", itemTotal)).append("\n");
    }

    invoice.append("\nTotal Amount: RM").append(String.format("%.2f", totalAmount));

    invoice.append("\n*Please choose your most comfortable payment method and make transactions accordingly*\n");
    invoice.append("QR Pay number:161461320331\n");
    invoice.append("TNG number:011-1055-7204\n");
    invoice.append("Maybank account number:1573 3088 4789\n");
    invoice.append("*Order will be confirmed and sent to delivery once payment has been confirmed by the cashier system.*");
    invoice.append("\nYou can check your order status by refferring to your invoice ID. Thank you!");

   

    //  save the invoice to the database and retrieve the invoiceId
    int invoiceId = saveInvoiceToDatabase(formattedDateTime, totalAmount, phoneNumber, conn);

    // If invoice is saved successfully display the invoice ID
    if (invoiceId != -1) {
        // Add the invoice ID to the invoice content
        invoice.append("\nInvoice ID: ").append(invoiceId);

        // Show the updated invoice to the user 
        JOptionPane.showMessageDialog(this, invoice.toString());

        //  save the invoice items to the database 
        saveInvoiceItemsToDatabase(invoiceId, conn);
        
         // Export the invoice to a file (TXT)
    exportInvoiceToFile(invoice.toString());
    }
}

private int saveInvoiceToDatabase(String generatedAt, double totalAmount, String phoneNumber, Connection conn) {
    // Define the SQL query to insert the invoice into the database
    String insertInvoiceSQL = "INSERT INTO invoice (phone_number, total_amount, generated_at) VALUES (?, ?, ?)";

    try (PreparedStatement stmt = conn.prepareStatement(insertInvoiceSQL, Statement.RETURN_GENERATED_KEYS)) {
        // Set the parameters for the query
        stmt.setString(1, phoneNumber);  
        stmt.setDouble(2, totalAmount);  
        stmt.setString(3, generatedAt);  

        // Execute the query
        int affectedRows = stmt.executeUpdate();

        // Check if the query was successful
        if (affectedRows == 0) {
            throw new SQLException("Creating invoice failed, no rows affected.");
        }

        // Get the generated invoice ID from the query
        try (ResultSet generatedKeys = stmt.getGeneratedKeys()) {
            if (generatedKeys.next()) {
                int invoiceId = generatedKeys.getInt(1);  // Retrieve the generated invoice ID
                // save the invoice items to the database 
                saveInvoiceItemsToDatabase(invoiceId, conn);
                return invoiceId;  // Return the generated invoice ID
            } else {
                throw new SQLException("Creating invoice failed, no ID obtained.");
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error saving invoice to database: " + e.getMessage());
        return -1;  // Return -1 if there is an error
    }
}



        

  //  save items in the invoice to the database
private void saveInvoiceItemsToDatabase(int invoiceId, Connection conn) {
    String insertItemSQL = "INSERT INTO invoice_item (invoice_id, product_name, quantity, unit_price, total_price) VALUES (?, ?, ?, ?, ?)";

    // Try-with-resources for PreparedStatement
    try (PreparedStatement stmt = conn.prepareStatement(insertItemSQL)) {

        // Loop through the cart and save each item
        for (CartItem item : cart) {
            stmt.setInt(1, invoiceId);  // Set the invoice ID for this item
            stmt.setString(2, item.getName());  // Set the product name
            stmt.setInt(3, item.getQuantity());  // Set the quantity
            stmt.setDouble(4, item.getPrice());  // Set the unit price
            stmt.setDouble(5, item.getTotalPrice());  // Set the total price

            stmt.addBatch();  // Add the item to the batch
        }

        // Execute the batch to insert all items at once
        stmt.executeBatch();

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error saving invoice items to database: " + e.getMessage());
    }
}

    // export the invoice to a file (TXT)
    private void exportInvoiceToFile(String invoiceText) {
        String fileName = "Invoice_" + System.currentTimeMillis() + ".txt";  // File name with timestamp

        try (FileWriter fileWriter = new FileWriter(fileName)) {
            // Write the invoice text to the file
            fileWriter.write(invoiceText);
            JOptionPane.showMessageDialog(this, "Invoice has been exported to file: " + fileName);
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error exporting invoice to file: " + e.getMessage());
        }
    }





   
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
         addProductToCart(1);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void CartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CartActionPerformed
        // TODO add your handling code here:
        displayCart();
    }//GEN-LAST:event_CartActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        generateReceipt();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        addProductToCart(2);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        addProductToCart(3);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        addProductToCart(4);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        addProductToCart(5);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        addProductToCart(6);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        addProductToCart(7);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        addProductToCart(8);
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
        addProductToCart(9);
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
        addProductToCart(10);
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        // TODO add your handling code here:
        addProductToCart(11);
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        // TODO add your handling code here:
        addProductToCart(12);
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        // TODO add your handling code here:
        addProductToCart(13);
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        // TODO add your handling code here:
        addProductToCart(14);
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        // TODO add your handling code here:
        CashierDashboard cashierdashboard = new CashierDashboard();
        cashierdashboard.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        // TODO add your handling code here:
        generateInvoice();
    }//GEN-LAST:event_jButton17ActionPerformed

    
    
   
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GenerateReceipt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GenerateReceipt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GenerateReceipt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GenerateReceipt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GenerateReceipt().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Cart;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
